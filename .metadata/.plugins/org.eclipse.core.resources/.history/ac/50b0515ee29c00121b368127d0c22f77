package com.pcm.training;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;

import com.pcm.training.Employee;
import com.pcm.training.President;
import com.pcm.training.PresidentException;
import com.pcm.training.service.PayrollService;

public class PersonFactory<H extends Employee>{
                
                private static PersonFactory instance;
                @SuppressWarnings({ "unchecked", "rawtypes" })
                public static PersonFactory getInstance() {
                                if (instance == null) {
                                                instance = new PersonFactory<>();
                                }
                                return instance;
                }

                public H createInstance(String name, String last, int age, String salary, Class<H> theClass)
                                                   throws IllegalAccessException, InstantiationException, IllegalArgumentException, InvocationTargetException, NoSuchMethodException, SecurityException {
                                Constructor<H> constructor = theClass.getDeclaredConstructor(String.class,String.class,Integer.class,String.class);
                                return constructor.newInstance(name,last,age,salary);
                }

}
main{
                President(string name, string last, int age, string slary)
                PersonFactory<President> factory = new PersonFactor<President>();
                President p = factory.createInstance("k", "T", 11, "20000", President.class);
                co
}

