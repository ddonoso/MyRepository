package com.pcm.training;

import static org.junit.Assert.assertEquals;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Random;
import java.util.SortedSet;
import java.util.TreeSet;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.junit.Test;

import com.pcm.training.entity.Person;
import com.pcm.training.entity.President;
import com.pcm.training.exception.PresidentException;

@Entity
@Table (name = "PayRoll")
@SequenceGenerator(name = "payroll_seq", initialValue = 1, allocationSize = 1000)
public class PayRoll {
	@Id
	@Column (name = "ID")
	@GeneratedValue (strategy = GenerationType.SEQUENCE, generator = "payroll_seq")
	private int id;
	
	 private final int NUMBER_OF_MONTHS = 12;
	 	
	 	@Column (name = "SALARY")
		private BigDecimal salary;
	 	
	 	@Column (name = "ANNUALINCOME")
	    private String salaryWithBonusAnnual;
	 
	 	@Transient
	    private BigDecimal percentageBonus;
	 	
	 	@ManyToOne
	 	@JoinColumn(name = "EMPLOYEE_ID")
	 	private Employee employee;
	 	
	 	
	
	public PayRoll(BigDecimal salary, BigDecimal percentageBonus) {
			this.salary = salary;
			this.percentageBonus = percentageBonus;
		}
	
	public void setSalaryWithBonusAnnual(String salaryWithBonusAnnual) {
		this.salaryWithBonusAnnual = salaryWithBonusAnnual;
	}
	public BigDecimal getSalary() {
		return salary;
	}
	
	public String getSalaryWithBonusAnnual() {
		
		BigDecimal annualSalary = new BigDecimal(0);
		
		annualSalary = getSalary().multiply(BigDecimal.valueOf(NUMBER_OF_MONTHS));
		
		BigDecimal bonus = (annualSalary.multiply(getPercentageBonus()));
		
		BigDecimal p = bonus.add(annualSalary);
		
		this.salaryWithBonusAnnual = p.toString();
	
		return salaryWithBonusAnnual;

	}


	public BigDecimal getPercentageBonus() {
		return percentageBonus;
	}
	
	
	public void setPercentageBonus(BigDecimal percentageBonus) {
		this.percentageBonus = percentageBonus;
	}
	public void setSalary(BigDecimal salary) {
		this.salary = salary;	
			
	}
	@Test
    public void collectionCompareTest() throws PresidentException {
           Person p = new President("Kelvin", "Te", 21, "100000");
           Person p1 = new President("Cathy","Belen", 21, "100000");
           Person p2 = new President("Kevin", "Dorado", 21, "100000");
           Person p3 = new President("Kel", "Calayang", 21, "100000");
           
           SortedSet<Person> s = new TreeSet<Person>(new Comparator<Person>() {

                  @Override
                  public int compare(Person o1, Person o2) {
                        // TODO Auto-generated method stub
                        return o1.getLastName().compareTo(o2.getLastName());
                  }
           });
           s.add(p1);
           s.add(p2);
           s.add(p3);
           s.add(p);
           
           List<Person> list = new ArrayList<Person>(s);
           assertEquals(list.get(0).getLastName(),"Belen");

           assertEquals(list.get(1).getLastName(),"Calayang");

           assertEquals(list.get(2).getLastName(),"Dorado");

           assertEquals(list.get(3).getLastName(),"Te");
	}
	
		 	 
	 
}
